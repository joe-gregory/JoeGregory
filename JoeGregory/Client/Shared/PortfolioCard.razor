@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? ProjectName { get; set; }
    [Parameter] public string? ValueProposition { get; set; }
    [Parameter] public string? TechStack { get; set; }
    [Parameter] public string? ProjectLink { get; set; }
    [Parameter] public string? GithubRepoLink { get; set; }
    [Parameter] public string? ImageOrVideoLink { get; set; }
    [Parameter] public MarkupString? Description { get; set; }
    [Parameter] public bool IsVideo { get; set; }
}

<MudCard Class="portfolio-card" Elevation="23" id="@Id">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@ProjectName</MudText>
            <MudText Typo="Typo.overline">@ValueProposition</MudText>
            <MudText Typo="Typo.body2"><strong>Tech stack: </strong>@TechStack</MudText>
            <MudLink Href="@ProjectLink" Underline="Underline.Always">@ProjectLink</MudLink>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Default" Href="@GithubRepoLink" />
        </CardHeaderActions>
    </MudCardHeader>
    @if (IsVideo)
    {
        <MudCardMediaVideo VideoUrl="@ImageOrVideoLink" Height="500" />
    }
    else
    {
        <MudCardMedia Image="@ImageOrVideoLink" Height="500" />
    }
    <MudCardContent>
        <MudExpansionPanels>
            <MudExpansionPanel Text="Description">@Description</MudExpansionPanel>
        </MudExpansionPanels>
    </MudCardContent>
    <MudCardActions>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" OnClick="@(e => ShareContent(Id))" />
    </MudCardActions>
</MudCard>

@code {
    @inject IJSRuntime JSRuntime
    @inject NavigationManager NavigationManager
    public async Task ShareContent(string cardId)
    {
        string url = $"{NavigationManager.Uri}#{cardId}";
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url);
    }
}